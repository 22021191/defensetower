<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Credentials</name>
    </assembly>
    <members>
        <member name="M:NuGet.Credentials.CredentialResponse.#ctor(NuGet.Credentials.CredentialStatus)">
            <summary>
            Creates a credential response object without giving credentials. This constructor is used only if the
            credential provider was not able to get credentials. The <paramref name="status" /> indicates why the
            provider was not able to get credentials.
            </summary>
            <param name="status">The status of why the credential provider was not able to get credentials.</param>
        </member>
        <member name="M:NuGet.Credentials.CredentialResponse.#ctor(System.Net.ICredentials)">
            <summary>
            Creates a credential response object with a given set of credentials. This constuctor is used only if the
            credential provider was able to get credentials.
            </summary>
            <param name="credentials">The credentials fetched by the credential provider.</param>
        </member>
        <member name="T:NuGet.Credentials.CredentialsConstants">
            <summary>
            Contains constants used for credential providers.
            </summary>
        </member>
        <member name="F:NuGet.Credentials.CredentialsConstants.ProviderTimeoutSecondsDefault">
            <summary>
            Default timeout in seconds for the credential provider.
            </summary>
        </member>
        <member name="F:NuGet.Credentials.CredentialsConstants.ProviderTimeoutSecondsEnvar">
            <summary>
            Environment variable for the credential provider timeout in seconds.
            </summary>
        </member>
        <member name="F:NuGet.Credentials.CredentialsConstants.ProviderTimeoutSecondsSetting">
            <summary>
            Setting name for the credential provider timeout.
            </summary>
        </member>
        <member name="T:NuGet.Credentials.CredentialService">
            <summary>
            This service manages orchestrates credential providers and supplies credentials
            for use in http requests
            </summary>
        </member>
        <member name="F:NuGet.Credentials.CredentialService.ProviderSemaphore">
            <summary>
            This semaphore ensures only one provider active per process, in order
            to prevent multiple concurrent interactive login dialogues.
            Unnamed semaphores are local to the current process.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.CredentialService.HandlesDefaultCredentials">
            <summary>
            Gets a value indicating whether this credential service handles default credentials.
            </summary>
        </member>
        <member name="M:NuGet.Credentials.CredentialService.#ctor(NuGet.Common.AsyncLazy{System.Collections.Generic.IEnumerable{NuGet.Credentials.ICredentialProvider}},System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="providers">All available credential providers.</param>
            <param name="nonInteractive">If true, the nonInteractive flag will be passed to providers.
            <param name="handlesDefaultCredentials"> If true, specifies that this credential service handles default credentials as well.
            That means that DefaultNetworkCredentialsCredentialProvider instance is in the list of providers. It's set explicitly as a perfomance optimization.</param>
            NonInteractive requests must not promt the user for credentials.</param>
        </member>
        <member name="M:NuGet.Credentials.CredentialService.GetCredentialsAsync(System.Uri,System.Net.IWebProxy,NuGet.Configuration.CredentialRequestType,System.String,System.Threading.CancellationToken)">
            <summary>
            Provides credentials for http requests.
            </summary>
            <param name="uri">
            The URI of a web resource for which credentials are needed.
            </param>
            <param name="proxy">
            The currently configured proxy. It may be necessary for CredentialProviders
            to use this proxy in order to acquire credentials from their authentication source.
            </param>
            <param name="type">
            The type of credential request that is being made.
            </param>
            <param name="message">
            A default, user-readable message explaining why they are being prompted for credentials.
            The credential provider can choose to ignore this value and write their own message.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A credential object, or null if no credentials could be acquired.</returns>
        </member>
        <member name="M:NuGet.Credentials.CredentialService.TryGetLastKnownGoodCredentialsFromCache(System.Uri,System.Boolean,System.Net.ICredentials@)">
            <summary>
            Attempts to retrieve last known good credentials for a URI from a credentials cache.
            </summary>
            <remarks>
            When the return value is <see langword="true" />, <paramref name="credentials" /> will have last known
            good credentials from the credentials cache.  These credentials may have become invalid
            since their last use, so there is no guarantee that the credentials are currently valid.
            </remarks>
            <param name="uri">The URI for which cached credentials should be retrieved.</param>
            <param name="isProxy"><see langword="true" /> for proxy credentials; otherwise, <see langword="false" />.</param>
            <param name="credentials">Cached credentials or <see langword="null" />.</param>
            <returns><see langword="true" /> if a result is returned from the cache; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:NuGet.Credentials.CredentialService._providers">
            <summary>
            Gets the currently configured providers.
            </summary>
        </member>
        <member name="T:NuGet.Credentials.CredentialStatus">
            <summary>
            Result of an attempt to acquire credentials.
            Keep in sync with NuGet.VisualStudio.VsCredentialStatus
            </summary>
        </member>
        <member name="F:NuGet.Credentials.CredentialStatus.Success">
            <summary>
            Credentials were successfully acquired.
            </summary>
        </member>
        <member name="F:NuGet.Credentials.CredentialStatus.ProviderNotApplicable">
            <summary>
            The provider was not applicable for acquiring credentials.
            </summary>
        </member>
        <member name="F:NuGet.Credentials.CredentialStatus.UserCanceled">
            <summary>
            The user canceled the credential acquisition process.
            </summary>
        </member>
        <member name="M:NuGet.Credentials.DefaultCredentialServiceUtility.SetupDefaultCredentialService(NuGet.Common.ILogger,System.Boolean)">
            <summary>
            Sets-up the CredentialService and all of its providers.
            It always updates the logger the CredentialService and its children own,
            because the lifetime of the logging infrastructure is not guaranteed. 
            </summary>
            <param name="logger"></param>
            <param name="nonInteractive"></param>
        </member>
        <member name="M:NuGet.Credentials.DefaultCredentialServiceUtility.UpdateCredentialServiceDelegatingLogger(NuGet.Common.ILogger)">
            <summary>
            Update the delegating logger for the credential service.
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:NuGet.Credentials.DefaultNetworkCredentialsCredentialProvider">
            <summary>
            A credential provider which supplies <see cref="P:System.Net.CredentialCache.DefaultNetworkCredentials" />
            </summary>
        </member>
        <member name="P:NuGet.Credentials.DefaultNetworkCredentialsCredentialProvider.Id">
            <summary>
            Unique identifier of this credential provider
            </summary>
        </member>
        <member name="M:NuGet.Credentials.DefaultNetworkCredentialsCredentialProvider.GetAsync(System.Uri,System.Net.IWebProxy,NuGet.Configuration.CredentialRequestType,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns <see cref="P:System.Net.CredentialCache.DefaultNetworkCredentials" />, or 
            <see cref="F:NuGet.Credentials.CredentialStatus.ProviderNotApplicable" /> if this is a retry
            </summary>
            <remarks>
            If the flag to delay using default credentials until after plugin credential provicers run is not enabled,
            this always returns <see cref="F:NuGet.Credentials.CredentialStatus.ProviderNotApplicable" />.
            </remarks>
            <param name="uri">Ignored.</param>
            <param name="proxy">Ignored.</param>
            <param name="type">Ignored.</param>
            <param name="message">Ignored.</param>
            <param name="isRetry">
            If true, returns <see cref="F:NuGet.Credentials.CredentialStatus.ProviderNotApplicable" /> instead of default credentials
            </param>
            <param name="nonInteractive">Ignored.</param>
            <param name="cancellationToken">Ignored.</param>
        </member>
        <member name="T:NuGet.Credentials.DelegatingLogger">
            <summary>
             A delegating logger.
            </summary>
        </member>
        <member name="T:NuGet.Credentials.ICredentialProvider">
            <summary>
            Interface for providing credentials.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.ICredentialProvider.Id">
            <summary>
            Gets the identifier of the credential provider.
            </summary>
        </member>
        <member name="M:NuGet.Credentials.ICredentialProvider.GetAsync(System.Uri,System.Net.IWebProxy,NuGet.Configuration.CredentialRequestType,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the credentials.
            </summary>
            <param name="uri">The URI for which the credentials are requested.</param>
            <param name="proxy">The proxy to use.</param>
            <param name="type">The type of credential request.</param>
            <param name="message">The message to display.</param>
            <param name="isRetry">Indicates if this is a retry attempt.</param>
            <param name="nonInteractive">Indicates if the request should be non-interactive.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the credential response.</returns>
        </member>
        <member name="T:NuGet.Credentials.PluginCredentialProvider">
            <summary>
            Provider that handles calling command line credential providers
            </summary>
        </member>
        <member name="M:NuGet.Credentials.PluginCredentialProvider.#ctor(NuGet.Common.ILogger,System.String,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="logger">IConsole logger to use for debug logging. No secrets should ever be written to this log.</param>
            <param name="path">Fully qualified plugin application path.</param>
            <param name="timeoutSeconds">Max timeout to wait for the plugin application
            to return credentials.</param>
            <param name="verbosity">Verbosity string to pass to the plugin.</param>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialProvider.Id">
            <summary>
            Unique identifier of this credential provider
            </summary>
        </member>
        <member name="M:NuGet.Credentials.PluginCredentialProvider.GetAsync(System.Uri,System.Net.IWebProxy,NuGet.Configuration.CredentialRequestType,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Call the plugin credential provider application to acquire credentials.
            The request will be passed to the plugin on standard input as a json serialized
            PluginCredentialRequest.
            The plugin will return credentials as a json serialized PluginCredentialResponse.
            Valid credentials will be returned, or null if the provide cannot provide credentials
            for the given request.  If the plugin returns an Abort message, an exception will be thrown to
            fail the current request.
            </summary>
            <param name="uri">The uri of a web resource for which credentials are needed.</param>
            <param name="proxy">Ignored.  Proxy information will not be passed to plugins.</param>
            <param name="type">
            The type of credential request that is being made. Note that this implementation of
            <see cref="T:NuGet.Credentials.ICredentialProvider" /> does not support providing proxy credenitials and treats
            all other types the same.
            </param>
            <param name="isRetry">If true, credentials were previously supplied by this
            provider for the same uri.</param>
            <param name="message">A message provided by NuGet to show to the user when prompting.</param>
            <param name="nonInteractive">If true, the plugin must not prompt for credentials.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A credential object.</returns>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialProvider.Path">
            <summary>
            Path to plugin credential provider executable.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialProvider.TimeoutSeconds">
            <summary>
            Seconds to wait for plugin credential service to respond.
            </summary>
        </member>
        <member name="T:NuGet.Credentials.PluginCredentialProviderBuilder">
            <summary>
            Discovers plugin providers.
            </summary>
        </member>
        <member name="M:NuGet.Credentials.PluginCredentialProviderBuilder.#ctor(NuGet.Configuration.IExtensionLocator,NuGet.Configuration.ISettings,NuGet.Common.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NuGet.Credentials.PluginCredentialProviderBuilder" /> class.
            </summary>
            <param name="extensionLocator">The extension locator.</param>
            <param name="settings">The settings.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:NuGet.Credentials.PluginCredentialProviderBuilder.#ctor(NuGet.Configuration.IExtensionLocator,NuGet.Configuration.ISettings,NuGet.Common.ILogger,NuGet.Common.IEnvironmentVariableReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NuGet.Credentials.PluginCredentialProviderBuilder" /> class.
            </summary>
            <param name="extensionLocator">The extension locator.</param>
            <param name="settings">The settings.</param>
            <param name="logger">The logger.</param>
            <param name="envarReader">The environment variable reader.</param>
        </member>
        <member name="M:NuGet.Credentials.PluginCredentialProviderBuilder.BuildAll(System.String)">
            <summary>
            Plugin providers are entered loaded the same way as other nuget extensions,
            matching any extension named CredentialProvider.*.exe.
            </summary>
            <returns>An enumeration of plugin providers</returns>
        </member>
        <member name="T:NuGet.Credentials.PluginCredentialRequest">
            <summary>
            Request data passed to plugin credential provider applications.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialRequest.Uri">
            <summary>
            Gets or sets the package source URI for the credential request.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialRequest.NonInteractive">
            <summary>
            Gets or sets a value indicating whether the request is non-interactive.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialRequest.IsRetry">
            <summary>
            Gets or sets a value indicating whether the request is a retry.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialRequest.Verbosity">
            <summary>
            Gets or sets the verbosity level for the request.
            </summary>
        </member>
        <member name="T:NuGet.Credentials.PluginCredentialResponse">
            <summary>
            Response data returned from plugin credential provider applications
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialResponse.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialResponse.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialResponse.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialResponse.AuthTypes">
            <summary>
            Gets or sets the list of authentication types this credential is applicable to. Useful values include
            <c>basic</c>, <c>digest</c>, <c>negotiate</c>, and <c>ntlm</c>
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PluginCredentialResponse.IsValid">
            <summary>
            Gets a value indicating whether the provider returnd a valid response.
            </summary>
            <remarks>
            Either Username or Password (or both) must be set, and AuthTypes must either be null or contain at least
            one element
            </remarks>
        </member>
        <member name="T:NuGet.Credentials.PluginUnexpectedStatusException">
            <summary>
            PluginUnexpectedStatusException results when a plugin credential provider returns an unexpected status,
            one not enumerated in PluginCredentialResponseExitCode.
            This typically occurs when a plugin throws a terminating exception.
            </summary>
        </member>
        <member name="M:NuGet.Credentials.PluginUnexpectedStatusException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NuGet.Credentials.PluginUnexpectedStatusException" /> class.
            </summary>
        </member>
        <member name="M:NuGet.Credentials.PluginUnexpectedStatusException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NuGet.Credentials.PluginUnexpectedStatusException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NuGet.Credentials.PluginUnexpectedStatusException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NuGet.Credentials.PluginUnexpectedStatusException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NuGet.Credentials.PluginUnexpectedStatusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NuGet.Credentials.PluginUnexpectedStatusException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NuGet.Credentials.PluginUnexpectedStatusException.CreateUnexpectedStatusMessage(System.String,NuGet.Credentials.PluginCredentialResponseExitCode)">
            <summary>
            Creates a new <see cref="T:NuGet.Credentials.PluginUnexpectedStatusException" /> with a formatted message indicating an unexpected status.
            </summary>
            <param name="path">The path of the plugin.</param>
            <param name="status">The unexpected status returned by the plugin.</param>
            <returns>A new instance of <see cref="T:NuGet.Credentials.PluginUnexpectedStatusException" />.</returns>
        </member>
        <member name="T:NuGet.Credentials.PreviewFeatureSettings">
            <summary>
            Settings for in-flight features not ready to be turned on permanently
            </summary>
        </member>
        <member name="P:NuGet.Credentials.PreviewFeatureSettings.DefaultCredentialsAfterCredentialProviders">
            <summary>
            Use DefaultNetworkCredentialsCredentialProvider after plugin credential providers to handle using the user's
            ambient Windows credentials, instead of support baked into HttpSourceCredentials
            </summary>
        </member>
        <member name="T:NuGet.Credentials.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginException_Abort_Format">
            <summary>
              Looks up a localized string similar to Credential plugin {0} handles this request, but is unable to provide credentials. {1}.
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginException_Exception_Format">
            <summary>
              Looks up a localized string similar to Credential plugin {0} encountered exception {1}..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginException_InvalidResponse_Format">
            <summary>
              Looks up a localized string similar to Credential plugin {0} returned {1}, but the payload was not valid (username = {2}, password = {3}, authTypes = {4}, message = {5})..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginException_NotStarted_Format">
            <summary>
              Looks up a localized string similar to Credential plugin {0} failed to start..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginException_PathNotFound_Format">
            <summary>
              Looks up a localized string similar to Credential plugin {0} not found at any of the following locations {1}..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginException_Timeout_Format">
            <summary>
              Looks up a localized string similar to Credential plugin {0} timed out after {1} seconds..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginException_UnexpectedStatus_Format">
            <summary>
              Looks up a localized string similar to Credential plugin {0} exited with unexpected error {1}..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginException_UnreadableResponse_Format">
            <summary>
              Looks up a localized string similar to Credential plugin {0} returned {1} with an unreadable payload..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.PluginWarning_PluginIsBeingDeprecated">
            <summary>
              Looks up a localized string similar to The credential plugin model used by '{0}' is deprecated. Please contact the provider of the plugin for an alternative. More information about the recommended plugin model can be found at '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.ProviderException_InvalidCredentialResponse">
            <summary>
              Looks up a localized string similar to Could not create credential response object because the response was invalid..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.ProviderException_MalformedResponse">
            <summary>
              Looks up a localized string similar to Credential provider gave an invalid response..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.SecurePluginNotice_UsingPluginAsProvider">
            <summary>
              Looks up a localized string similar to Using {0} as a credential provider plugin..
            </summary>
        </member>
        <member name="P:NuGet.Credentials.Resources.SecurePluginWarning_UseInteractiveOption">
            <summary>
              Looks up a localized string similar to The plugin credential provider could not acquire credentials. Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet`.
            </summary>
        </member>
        <member name="F:NuGet.Credentials.SecurePluginCredentialProvider._discoveredPlugin">
            <summary>
            Plugin that this provider will use to acquire credentials
            </summary>
        </member>
        <member name="F:NuGet.Credentials.SecurePluginCredentialProvider._logger">
            <summary>
            logger
            </summary>
        </member>
        <member name="F:NuGet.Credentials.SecurePluginCredentialProvider._pluginManager">
            <summary>
            pluginManager
            </summary>
        </member>
        <member name="F:NuGet.Credentials.SecurePluginCredentialProvider._canShowDialog">
            <summary>
            canShowDialog, whether the plugin can prompt or it should use device flow. This is a host decision not a user one. 
            </summary>
        </member>
        <member name="M:NuGet.Credentials.SecurePluginCredentialProvider.#ctor(NuGet.Protocol.Plugins.IPluginManager,NuGet.Protocol.Plugins.PluginDiscoveryResult,System.Boolean,NuGet.Common.ILogger)">
            <summary>
            Create a credential provider based on provided plugin
            </summary>
            <param name="pluginManager"></param>
            <param name="pluginDiscoveryResult"></param>
            <param name="canShowDialog"></param>
            <param name="logger"></param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="pluginDiscoveryResult" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="logger" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="pluginManager" /> is null</exception>
            <exception cref="T:System.ArgumentException">if plugin file is not valid</exception>
        </member>
        <member name="P:NuGet.Credentials.SecurePluginCredentialProvider.Id">
            <summary>
            Unique identifier of this credential provider
            </summary>
        </member>
        <member name="M:NuGet.Credentials.SecurePluginCredentialProvider.GetAsync(System.Uri,System.Net.IWebProxy,NuGet.Configuration.CredentialRequestType,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <param name="uri">The uri of a web resource for which credentials are needed.</param>
            <param name="proxy">Ignored.  Proxy information will not be passed to plugins.</param>
            <param name="type">
            The type of credential request that is being made. Note that this implementation of
            <see cref="T:NuGet.Credentials.ICredentialProvider" /> does not support providing proxy credenitials and treats
            all other types the same.
            </param>
            <param name="isRetry">If true, credentials were previously supplied by this
            provider for the same uri.</param>
            <param name="message">A message provided by NuGet to show to the user when prompting.</param>
            <param name="nonInteractive">If true, the plugin must not prompt for credentials.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A credential object.</returns>
        </member>
        <member name="M:NuGet.Credentials.SecurePluginCredentialProvider.GetAuthenticationCredentialsResponseToCredentialResponse(NuGet.Protocol.Plugins.GetAuthenticationCredentialsResponse)">
            <summary>
            Convert from Plugin CredentialResponse to the CredentialResponse model used by the ICredentialService
            </summary>
            <param name="credentialResponse"></param>
            <returns>credential response</returns>
        </member>
        <member name="T:NuGet.Credentials.SecurePluginCredentialProviderBuilder">
            <summary>
            Builder for credential providers that are based on the secure plugin model (Version 2.0.0)
            </summary>
        </member>
        <member name="M:NuGet.Credentials.SecurePluginCredentialProviderBuilder.#ctor(NuGet.Protocol.Plugins.IPluginManager,System.Boolean,NuGet.Common.ILogger)">
            <summary>
            Create a credential provider builders
            </summary>
            <param name="pluginManager">pluginManager</param>
            <param name="canShowDialog">canShowDialog - whether can pop up a dialog or it needs to use device flow</param>
            <param name="logger">logger</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="logger" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="pluginManager" /> is null</exception>
        </member>
        <member name="M:NuGet.Credentials.SecurePluginCredentialProviderBuilder.BuildAllAsync">
            <summary>
            Creates credential providers for each valid plugin (regardless if it supports authentication or not)
            </summary>
            <returns>credential providers</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>ejHlOTmvatOpTDBT7HPG3q/6Z+ylXA3XEq9QDYnuxog=</DigestValue></Reference></SignedInfo><SignatureValue>XmDlbs61C0u41n2y+bmW4wJpyBdZfO5lCvq6r/H0KGTDbwRSoA3STydd3tfuO9XHEJBTNCzzOHjpLoKBLQJfdQD4ZG7f+8eyKJBdC4kfRwcjYRuL0BP6Ep8gYUZapkLI84RagjKd8LTHYB3/Ck/LbwaS3x01uIiXUsXa/kzzgfoe1iWuspMjO4A/5vMftwymc8uwqENyXoz10PxXobiPJ3pNMnO+xUzm0hteEL6B83oLQHgFgvdnAHVpViMX5BNY2it5hF83ITWxnoc5B+p4c/ZR/6NozkgBDm/BKJ16EVvWT8w7K0uNKNBEJMlHwjGKtYbs3AMEXwdgE274r96ESw==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>tCg32mOdDA6rBBnZSMwxwXegqiDEUFlvQH9Sxww07hY3w7L52tJxLg0mCZjcszQddI6W4NJYb5E9QM319kyyE0l8EvA/pgcxgljDP8E6XIlgVf6W40ms286Cr0azaA1f7vaJjjNhGsMqOSSSXTZDNnfKs5ENG0bkXeB2q5hrp0qLsm/TWO3oFjeROZVHN2tgETswHR3WKTm6QjnXgGNj+V6rSZJO/WkTqc8NesAo3Up/KjMwgc0e67x9llZLxRyyMWUBE9coT2+pUZqYAUDZ84nR1djnMY3PMDYiA84Gw5JpceeED38O0cEIvKdX8uG8oQa047+evMfDRr94MG9EWw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
